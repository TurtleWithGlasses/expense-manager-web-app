# Expense Manager Web App (Python)

A production‑ready starter kit for building a user‑based expense manager on the web using **FastAPI + SQLAlchemy + Alembic + PostgreSQL + HTMX + Tailwind**.

---

## 1) Requirements & Environment Setup

**Core stack**

* Python 3.11+
* FastAPI (Starlette under the hood)
* Uvicorn (ASGI server)
* SQLAlchemy 2.x + Alembic (ORM + migrations)
* PostgreSQL (recommended) or SQLite for dev
* Passlib\[bcrypt] (password hashing)
* Python‑multipart (form uploads)
* Pydantic v2 (schemas & settings)
* Jinja2 (server‑rendered templates)
* HTMX (progressive interactivity)
* TailwindCSS (styling)

**Optional**

* Docker + docker‑compose (DB & app)
* pytest + httpx (tests)

### Local environment steps (Windows / macOS / Linux)

```bash
# 1) Create & activate venv
python -m venv .venv
# Windows
.venv\Scripts\activate
# macOS/Linux
source .venv/bin/activate

# 2) Upgrade pip and install
python -m pip install --upgrade pip
pip install -r requirements.txt

# 3) Create .env from example and set values
cp .env.example .env
# edit DB URL, SECRET_KEY, etc.

# 4) Run Alembic migrations
alembic upgrade head

# 5) Start the dev server
uvicorn app.main:app --reload

# Tailwind (dev): requires NodeJS
npm install
npm run dev
```

**requirements.txt**

```
fastapi==0.115.0
uvicorn[standard]==0.30.6
jinja2==3.1.4
python-multipart==0.0.9
pydantic==2.8.2
pydantic-settings==2.3.4
sqlalchemy==2.0.35
alembic==1.13.2
psycopg2-binary==2.9.9
passlib[bcrypt]==1.7.4
itsdangerous==2.2.0
httpx==0.27.0
```

**.env.example**

```
# Database
DATABASE_URL=postgresql+psycopg2://postgres:postgres@localhost:5432/expense_manager
# For SQLite dev: sqlite:///./app.db

# Security
SECRET_KEY=change_me_please
SESSION_COOKIE_NAME=em_session
SESSION_MAX_AGE_SECONDS=2592000  # 30 days

# App
ENV=dev
```

**Docker (optional)**

```yaml
# docker-compose.yml
services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: expense_manager
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
volumes:
  pgdata:
```

---

## 2) Project Structure

```
expense_manager_web/
├─ requirements.txt
├─ .env.example
├─ .env                 # (local only)
├─ alembic.ini
├─ alembic/
│  ├─ versions/
│  │  └─ 20250902_0001_init.py
│  └─ env.py
├─ app/
│  ├─ main.py
│  ├─ deps.py
│  ├─ core/
│  │  ├─ config.py
│  │  ├─ security.py
│  │  └─ session.py
│  ├─ db/
│  │  ├─ base.py
│  │  ├─ engine.py
│  │  └─ session.py
│  ├─ models/
│  │  ├─ user.py
│  │  ├─ category.py
│  │  └─ entry.py        # income/expense entries
│  ├─ schemas/
│  │  ├─ auth.py
│  │  ├─ user.py
│  │  ├─ category.py
│  │  └─ entry.py
│  ├─ services/
│  │  ├─ auth.py
│  │  ├─ categories.py
│  │  └─ entries.py
│  ├─ api/
│  │  ├─ __init__.py
│  │  ├─ routes.py       # router aggregator
│  │  └─ v1/
│  │     ├─ auth.py
│  │     ├─ categories.py
│  │     └─ entries.py
│  ├─ templates/
│  │  ├─ base.html
│  │  ├─ auth/
│  │  │  ├─ login.html
│  │  │  └─ register.html
│  │  ├─ dashboard.html
│  │  ├─ entries/
│  │  │  ├─ index.html
│  │  │  ├─ _list.html   # htmx partial
│  │  │  └─ _form.html   # htmx partial
│  │  └─ categories/
│  │     ├─ index.html
│  │     └─ _form.html
│  └─ static/
│     ├─ css/
│     │  └─ styles.css   # Tailwind output
│     └─ js/
│        └─ htmx.min.js
├─ package.json          # Tailwind
├─ tailwind.config.js
└─ README.md
```

---

## 3) Backend Code (FastAPI)

### app/core/config.py

```python
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    DATABASE_URL: str = "sqlite:///./app.db"
    SECRET_KEY: str = "change_me"
    SESSION_COOKIE_NAME: str = "em_session"
    SESSION_MAX_AGE_SECONDS: int = 60 * 60 * 24 * 30
    ENV: str = "dev"

    class Config:
        env_file = ".env"

settings = Settings()
```

### app/db/engine.py

```python
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.core.config import settings

engine = create_engine(
    settings.DATABASE_URL, pool_pre_ping=True, future=True
)
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False, future=True)
```

### app/db/base.py

```python
from sqlalchemy.orm import DeclarativeBase

class Base(DeclarativeBase):
    pass
```

### app/db/session.py

```python
from contextlib import contextmanager
from app.db.engine import SessionLocal

@contextmanager
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
```

### app/models/user.py

```python
from sqlalchemy import String
from sqlalchemy.orm import Mapped, mapped_column, relationship
from app.db.base import Base

class User(Base):
    __tablename__ = "users"

    id: Mapped[int] = mapped_column(primary_key=True, index=True)
    email: Mapped[str] = mapped_column(String(255), unique=True, index=True)
    hashed_password: Mapped[str] = mapped_column(String(255))
    full_name: Mapped[str | None]

    categories = relationship("Category", back_populates="owner", cascade="all, delete-orphan")
    entries = relationship("Entry", back_populates="owner", cascade="all, delete-orphan")
```

### app/models/category.py

```python
from sqlalchemy import String, ForeignKey
from sqlalchemy.orm import Mapped, mapped_column, relationship
from app.db.base import Base

class Category(Base):
    __tablename__ = "categories"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(100), index=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id", ondelete="CASCADE"))

    owner = relationship("User", back_populates="categories")
    entries = relationship("Entry", back_populates="category")
```

### app/models/entry.py

```python
from datetime import date
from sqlalchemy import String, ForeignKey, Numeric, Date
from sqlalchemy.orm import Mapped, mapped_column, relationship
from app.db.base import Base

class EntryType:
    INCOME = "income"
    EXPENSE = "expense"

class Entry(Base):
    __tablename__ = "entries"

    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id", ondelete="CASCADE"))
    category_id: Mapped[int | None] = mapped_column(ForeignKey("categories.id", ondelete="SET NULL"))

    type: Mapped[str] = mapped_column(String(16))  # "income" | "expense"
    amount: Mapped[float] = mapped_column(Numeric(12, 2))
    note: Mapped[str | None] = mapped_column(String(255))
    date: Mapped[date] = mapped_column(Date)

    owner = relationship("User", back_populates="entries")
    category = relationship("Category", back_populates="entries")
```

### app/schemas/auth.py

```python
from pydantic import BaseModel, EmailStr

class RegisterIn(BaseModel):
    email: EmailStr
    full_name: str | None = None
    password: str

class LoginIn(BaseModel):
    email: EmailStr
    password: str
```

### app/schemas/user.py

```python
from pydantic import BaseModel, EmailStr

class UserOut(BaseModel):
    id: int
    email: EmailStr
    full_name: str | None

    class Config:
        from_attributes = True
```

### app/schemas/category.py

```python
from pydantic import BaseModel

class CategoryCreate(BaseModel):
    name: str

class CategoryOut(BaseModel):
    id: int
    name: str

    class Config:
        from_attributes = True
```

### app/schemas/entry.py

```python
from datetime import date
from pydantic import BaseModel

class EntryCreate(BaseModel):
    type: str  # income | expense
    amount: float
    category_id: int | None = None
    note: str | None = None
    date: date

class EntryOut(BaseModel):
    id: int
    type: str
    amount: float
    category_id: int | None
    note: str | None
    date: date

    class Config:
        from_attributes = True
```

### app/core/security.py

```python
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str) -> str:
    return pwd_context.hash(password)

def verify_password(plain: str, hashed: str) -> bool:
    return pwd_context.verify(plain, hashed)
```

### app/core/session.py (signed cookie sessions)

```python
from itsdangerous import URLSafeTimedSerializer
from starlette.requests import Request
from starlette.responses import Response
from app.core.config import settings

serializer = URLSafeTimedSerializer(settings.SECRET_KEY)

SESSION_COOKIE = settings.SESSION_COOKIE_NAME
MAX_AGE = settings.SESSION_MAX_AGE_SECONDS

# Store minimal user info (id & email) in a signed cookie

def set_session(response: Response, data: dict):
    token = serializer.dumps(data)
    response.set_cookie(
        SESSION_COOKIE,
        token,
        max_age=MAX_AGE,
        httponly=True,
        samesite="lax",
        secure=False,  # set True behind HTTPS in prod
        path="/",
    )

def get_session(request: Request) -> dict | None:
    token = request.cookies.get(SESSION_COOKIE)
    if not token:
        return None
    try:
        return serializer.loads(token, max_age=MAX_AGE)
    except Exception:
        return None

def clear_session(response: Response):
    response.delete_cookie(SESSION_COOKIE, path="/")
```

### app/services/auth.py

```python
from sqlalchemy.orm import Session
from app.models.user import User
from app.core.security import hash_password, verify_password

def create_user(db: Session, email: str, password: str, full_name: str | None = None) -> User:
    user = User(email=email, hashed_password=hash_password(password), full_name=full_name)
    db.add(user)
    db.commit()
    db.refresh(user)
    return user

def authenticate_user(db: Session, email: str, password: str) -> User | None:
    user = db.query(User).filter(User.email == email).first()
    if not user or not verify_password(password, user.hashed_password):
        return None
    return user
```

### app/services/categories.py

```python
from sqlalchemy.orm import Session
from app.models.category import Category

def list_categories(db: Session, user_id: int):
    return db.query(Category).filter(Category.user_id == user_id).order_by(Category.name).all()

def create_category(db: Session, user_id: int, name: str) -> Category:
    cat = Category(user_id=user_id, name=name)
    db.add(cat)
    db.commit()
    db.refresh(cat)
    return cat

def delete_category(db: Session, user_id: int, category_id: int) -> None:
    db.query(Category).filter(Category.user_id == user_id, Category.id == category_id).delete()
    db.commit()
```

### app/services/entries.py

```python
from sqlalchemy.orm import Session
from app.models.entry import Entry

def list_entries(db: Session, user_id: int):
    return db.query(Entry).filter(Entry.user_id == user_id).order_by(Entry.date.desc(), Entry.id.desc()).all()

def create_entry(db: Session, user_id: int, *, type: str, amount: float, category_id: int | None, note: str | None, date):
    e = Entry(user_id=user_id, type=type, amount=amount, category_id=category_id, note=note, date=date)
    db.add(e)
    db.commit()
    db.refresh(e)
    return e

def delete_entry(db: Session, user_id: int, entry_id: int) -> None:
    db.query(Entry).filter(Entry.user_id == user_id, Entry.id == entry_id).delete()
    db.commit()
```

### app/deps.py

```python
from fastapi import Request, HTTPException, status
from sqlalchemy.orm import Session
from app.db.session import get_db
from app.core.session import get_session

# FastAPI dependency helpers

def db_session() -> Session:
    with get_db() as db:
        yield db

def current_user(request: Request, db: Session = db_session()):
    sess = get_session(request)
    if not sess:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED)
    # Here we could look up fresh user if needed
    return sess  # {"id": int, "email": str}
```

### app/api/v1/auth.py

```python
from fastapi import APIRouter, Depends, Request, Form
from fastapi.responses import HTMLResponse, RedirectResponse
from sqlalchemy.orm import Session
from app.schemas.auth import RegisterIn, LoginIn
from app.services.auth import create_user, authenticate_user
from app.db.session import get_db
from app.core.session import set_session, clear_session
from app.core.config import settings
from app.templates import render

router = APIRouter(tags=["auth"])

@router.get("/login", response_class=HTMLResponse)
async def login_page():
    return render("auth/login.html")

@router.post("/login")
async def login(email: str = Form(...), password: str = Form(...), db: Session = Depends(get_db)):
    user = authenticate_user(db, email=email, password=password)
    if not user:
        return render("auth/login.html", {"error": "Invalid credentials"})
    resp = RedirectResponse(url="/", status_code=303)
    set_session(resp, {"id": user.id, "email": user.email})
    return resp

@router.get("/register", response_class=HTMLResponse)
async def register_page():
    return render("auth/register.html")

@router.post("/register")
async def register(email: str = Form(...), password: str = Form(...), full_name: str = Form(None), db: Session = Depends(get_db)):
    user = create_user(db, email=email, password=password, full_name=full_name)
    resp = RedirectResponse(url="/", status_code=303)
    set_session(resp, {"id": user.id, "email": user.email})
    return resp

@router.post("/logout")
async def logout():
    resp = RedirectResponse(url="/login", status_code=303)
    clear_session(resp)
    return resp
```

### app/api/v1/categories.py

```python
from fastapi import APIRouter, Depends, Form
from fastapi.responses import HTMLResponse
from sqlalchemy.orm import Session
from app.deps import current_user
from app.db.session import get_db
from app.services.categories import list_categories, create_category, delete_category
from app.templates import render

router = APIRouter(prefix="/categories", tags=["categories"])

@router.get("/", response_class=HTMLResponse)
async def page_me(user=Depends(current_user), db: Session = Depends(get_db)):
    cats = list_categories(db, user_id=user["id"])  # list
    return render("categories/index.html", {"categories": cats})

@router.post("/create", response_class=HTMLResponse)
async def add(name: str = Form(...), user=Depends(current_user), db: Session = Depends(get_db)):
    create_category(db, user_id=user["id"], name=name)
    cats = list_categories(db, user_id=user["id"])
    return render("categories/index.html", {"categories": cats})

@router.post("/delete/{category_id}")
async def remove(category_id: int, user=Depends(current_user), db: Session = Depends(get_db)):
    delete_category(db, user_id=user["id"], category_id=category_id)
    cats = list_categories(db, user_id=user["id"])
    return render("categories/index.html", {"categories": cats})
```

### app/api/v1/entries.py

```python
from fastapi import APIRouter, Depends, Form
from fastapi.responses import HTMLResponse
from sqlalchemy.orm import Session
from datetime import date
from app.deps import current_user
from app.db.session import get_db
from app.services.entries import list_entries, create_entry, delete_entry
from app.services.categories import list_categories
from app.templates import render

router = APIRouter(prefix="/entries", tags=["entries"])

@router.get("/", response_class=HTMLResponse)
async def page(user=Depends(current_user), db: Session = Depends(get_db)):
    entries = list_entries(db, user_id=user["id"])
    cats = list_categories(db, user_id=user["id"])
    return render("entries/index.html", {"entries": entries, "categories": cats})

@router.post("/create", response_class=HTMLResponse)
async def add(
    type: str = Form(...),
    amount: float = Form(...),
    category_id: int | None = Form(None),
    note: str | None = Form(None),
    date_str: str = Form(...),
    user=Depends(current_user),
    db: Session = Depends(get_db),
):
    create_entry(
        db,
        user_id=user["id"],
        type=type,
        amount=float(amount),
        category_id=category_id if category_id else None,
        note=note,
        date=date.fromisoformat(date_str),
    )
    entries = list_entries(db, user_id=user["id"])
    cats = list_categories(db, user_id=user["id"])
    return render("entries/_list.html", {"entries": entries})

@router.post("/delete/{entry_id}", response_class=HTMLResponse)
async def remove(entry_id: int, user=Depends(current_user), db: Session = Depends(get_db)):
    delete_entry(db, user_id=user["id"], entry_id=entry_id)
    entries = list_entries(db, user_id=user["id"])
    return render("entries/_list.html", {"entries": entries})
```

### app/api/routes.py

```python
from fastapi import APIRouter
from app.api.v1 import auth, categories, entries

api_router = APIRouter()
api_router.include_router(auth.router)
api_router.include_router(categories.router)
api_router.include_router(entries.router)
```

### app/templates helper (app/templates/**init**.py)

```python
from fastapi import Request
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse

_templates = Jinja2Templates(directory="app/templates")

# Small helper to render without Request in every endpoint

def render(path: str, context: dict | None = None) -> HTMLResponse:
    req = Request({'type': 'http'})
    return _templates.TemplateResponse(path, {"request": req, **(context or {})})
```

### app/main.py (app entrypoint)

```python
from fastapi import FastAPI, Request, Depends
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, RedirectResponse
from sqlalchemy import text
from app.api.routes import api_router
from app.core.session import get_session
from app.db.engine import engine
from app.templates import render

app = FastAPI(title="Expense Manager Web")

app.mount("/static", StaticFiles(directory="app/static"), name="static")
app.include_router(api_router)

@app.get("/", response_class=HTMLResponse)
async def dashboard(request: Request):
    sess = get_session(request)
    if not sess:
        return RedirectResponse(url="/login")
    # A minimal dashboard view
    return render("dashboard.html", {"user": sess})

# Healthcheck (optional)
@app.get("/healthz")
async def healthz():
    with engine.connect() as conn:
        conn.execute(text("SELECT 1"))
    return {"ok": True}
```

---

## 4) Database Migrations (Alembic)

**alembic.ini** (standard init via `alembic init alembic`)

**alembic/env.py** (key parts)

```python
from logging.config import fileConfig
from sqlalchemy import engine_from_config, pool
from alembic import context
from app.core.config import settings
from app.db.base import Base
from app.models.user import User
from app.models.category import Category
from app.models.entry import Entry

config = context.config
fileConfig(config.config_file_name)

def get_url():
    return settings.DATABASE_URL

def run_migrations_offline():
    context.configure(url=get_url(), target_metadata=Base.metadata, literal_binds=True)
    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online():
    connectable = engine_from_config(
        {"sqlalchemy.url": get_url()},
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )
    with connectable.connect() as connection:
        context.configure(connection=connection, target_metadata=Base.metadata)
        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
```

**alembic/versions/20250902\_0001\_init.py**

```python
from alembic import op
import sqlalchemy as sa

revision = '20250902_0001_init'
down_revision = None
branch_labels = None
depends_on = None

def upgrade() -> None:
    op.create_table(
        'users',
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('email', sa.String(255), nullable=False, unique=True, index=True),
        sa.Column('hashed_password', sa.String(255), nullable=False),
        sa.Column('full_name', sa.String(255), nullable=True),
    )

    op.create_table(
        'categories',
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('name', sa.String(100), nullable=False),
        sa.Column('user_id', sa.Integer, sa.ForeignKey('users.id', ondelete='CASCADE'), nullable=False),
    )

    op.create_table(
        'entries',
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('user_id', sa.Integer, sa.ForeignKey('users.id', ondelete='CASCADE'), nullable=False),
        sa.Column('category_id', sa.Integer, sa.ForeignKey('categories.id', ondelete='SET NULL'), nullable=True),
        sa.Column('type', sa.String(16), nullable=False),
        sa.Column('amount', sa.Numeric(12, 2), nullable=False),
        sa.Column('note', sa.String(255), nullable=True),
        sa.Column('date', sa.Date, nullable=False),
    )


def downgrade() -> None:
    op.drop_table('entries')
    op.drop_table('categories')
    op.drop_table('users')
```

---

## 5) Frontend (Templates + HTMX + Tailwind)

### Tailwind quick setup

**package.json**

```json
{
  "name": "expense-manager-web",
  "private": true,
  "scripts": {
    "dev": "tailwindcss -i ./app/static/css/input.css -o ./app/static/css/styles.css --watch",
    "build": "tailwindcss -i ./app/static/css/input.css -o ./app/static/css/styles.css --minify"
  },
  "devDependencies": {
    "tailwindcss": "^3.4.10"
  }
}
```

**tailwind.config.js**

```js
module.exports = {
  content: ["./app/templates/**/*.html"],
  theme: { extend: {} },
  plugins: [],
}
```

**app/static/css/input.css**

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

**Include htmx**: download `htmx.min.js` into `app/static/js/` or use CDN.

### app/templates/base.html

```html
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Expense Manager</title>
  <link href="/static/css/styles.css" rel="stylesheet" />
  <script src="/static/js/htmx.min.js" defer></script>
</head>
<body class="min-h-screen bg-gray-50 text-gray-900">
  <header class="bg-white shadow">
    <div class="mx-auto max-w-5xl px-4 py-4 flex items-center justify-between">
      <a href="/" class="font-semibold">💸 Expense Manager</a>
      <form method="post" action="/logout">
        <button class="text-sm text-red-600">Logout</button>
      </form>
    </div>
  </header>
  <main class="mx-auto max-w-5xl px-4 py-6">
    {% block content %}{% endblock %}
  </main>
</body>
</html>
```

### app/templates/auth/login.html

```html
{% extends "base.html" %}
{% block content %}
<h1 class="text-2xl font-semibold mb-4">Login</h1>
{% if error %}<p class="text-red-600 mb-3">{{ error }}</p>{% endif %}
<form method="post" action="/login" class="space-y-3 max-w-sm">
  <input name="email" type="email" placeholder="Email" class="w-full border px-3 py-2 rounded" required />
  <input name="password" type="password" placeholder="Password" class="w-full border px-3 py-2 rounded" required />
  <button class="px-4 py-2 bg-blue-600 text-white rounded">Sign In</button>
  <a class="ml-2 text-sm text-gray-600" href="/register">Create an account</a>
</form>
{% endblock %}
```

### app/templates/auth/register.html

```html
{% extends "base.html" %}
{% block content %}
<h1 class="text-2xl font-semibold mb-4">Register</h1>
<form method="post" action="/register" class="space-y-3 max-w-sm">
  <input name="full_name" type="text" placeholder="Full name" class="w-full border px-3 py-2 rounded" />
  <input name="email" type="email" placeholder="Email" class="w-full border px-3 py-2 rounded" required />
  <input name="password" type="password" placeholder="Password" class="w-full border px-3 py-2 rounded" required />
  <button class="px-4 py-2 bg-green-600 text-white rounded">Create Account</button>
</form>
{% endblock %}
```

### app/templates/dashboard.html

```html
{% extends "base.html" %}
{% block content %}
<h1 class="text-2xl font-semibold mb-6">Welcome, {{ user.email }}</h1>
<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
  <a href="/entries/" class="p-4 bg-white rounded shadow">➕ Add / View Entries</a>
  <a href="/categories/" class="p-4 bg-white rounded shadow">🏷️ Manage Categories</a>
  <a href="#" class="p-4 bg-white rounded shadow opacity-60 cursor-not-allowed" title="Coming soon">📅 Calendar (coming soon)</a>
</div>
{% endblock %}
```

### app/templates/categories/index.html

```html
{% extends "base.html" %}
{% block content %}
<h1 class="text-2xl font-semibold mb-4">Categories</h1>
<form hx-post="/categories/create" hx-target="#category-list" hx-swap="outerHTML" class="flex gap-2 mb-4">
  <input name="name" placeholder="New category" class="border rounded px-3 py-2" required />
  <button class="px-4 py-2 bg-blue-600 text-white rounded">Add</button>
</form>
<div id="category-list" class="bg-white rounded shadow">
  <ul>
    {% for c in categories %}
      <li class="flex items-center justify-between px-4 py-2 border-b last:border-none">
        <span>{{ c.name }}</span>
        <form hx-post="/categories/delete/{{ c.id }}" hx-target="#category-list" hx-swap="outerHTML">
          <button class="text-red-600">Delete</button>
        </form>
      </li>
    {% endfor %}
  </ul>
</div>
{% endblock %}
```

### app/templates/entries/index.html

```html
{% extends "base.html" %}
{% block content %}
<h1 class="text-2xl font-semibold mb-4">Entries</h1>
<form hx-post="/entries/create" hx-target="#entry-list" hx-swap="outerHTML" class="grid grid-cols-1 md:grid-cols-5 gap-3 bg-white p-4 rounded shadow mb-4">
  <select name="type" class="border rounded px-3 py-2">
    <option value="expense">Expense</option>
    <option value="income">Income</option>
  </select>
  <input name="amount" type="number" step="0.01" min="0" placeholder="Amount" class="border rounded px-3 py-2" required />
  <select name="category_id" class="border rounded px-3 py-2">
    <option value="">No category</option>
    {% for c in categories %}<option value="{{ c.id }}">{{ c.name }}</option>{% endfor %}
  </select>
  <input name="date_str" type="date" class="border rounded px-3 py-2" required />
  <input name="note" placeholder="Note (optional)" class="border rounded px-3 py-2 md:col-span-4" />
  <button class="px-4 py-2 bg-green-600 text-white rounded md:col-span-1">Add</button>
</form>

<div id="entry-list">
  {% include "entries/_list.html" %}
</div>
{% endblock %}
```

### app/templates/entries/\_list.html

```html
<table class="w-full bg-white rounded shadow overflow-hidden">
  <thead class="bg-gray-100 text-left">
    <tr>
      <th class="px-4 py-2">Date</th>
      <th class="px-4 py-2">Type</th>
      <th class="px-4 py-2">Category</th>
      <th class="px-4 py-2">Amount</th>
      <th class="px-4 py-2">Note</th>
      <th class="px-4 py-2"></th>
    </tr>
  </thead>
  <tbody>
  {% for e in entries %}
    <tr class="border-t">
      <td class="px-4 py-2">{{ e.date }}</td>
      <td class="px-4 py-2">{{ e.type }}</td>
      <td class="px-4 py-2">{{ e.category.name if e.category else '-' }}</td>
      <td class="px-4 py-2">{{ '₺{:,.2f}'.format(e.amount) }}</td>
      <td class="px-4 py-2">{{ e.note or '' }}</td>
      <td class="px-4 py-2 text-right">
        <form hx-post="/entries/delete/{{ e.id }}" hx-target="#entry-list" hx-swap="outerHTML">
          <button class="text-red-600">Delete</button>
        </form>
      </td>
    </tr>
  {% else %}
    <tr><td class="px-4 py-3" colspan="6">No entries yet.</td></tr>
  {% endfor %}
  </tbody>
</table>
```

---

## 6) Notes & Next Steps

* **Calendar**: integrate a calendar view by querying entries grouped by date and rendering on a month grid (server rendered) or using a lightweight JS lib.
* **Reports**: daily/weekly/monthly totals and category breakdowns; export CSV.
* **Auth hardening**: add CSRF tokens for form posts, rate limiting, email verification, password reset.
* **Validation**: enforce category uniqueness per user, stricter entry type enum.
* **Testing**: add unit tests for services and API routes with httpx/pytest.
* **Prod**: set `SECURE` cookies, reverse proxy (nginx), run migrations on deploy.

This starter kit mirrors your desktop features: users register/login, manage categories, add incomes/expenses with notes and dates, and everything persists in PostgreSQL.
